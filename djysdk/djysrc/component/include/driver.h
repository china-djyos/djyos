//----------------------------------------------------
// Copyright (c) 2014, SHENZHEN PENGRUI SOFT CO LTD. All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------
// Copyright (c) 2014 著作权由深圳鹏瑞软件有限公司所有。著作权人保留一切权利。
//
// 这份授权条款，在使用者符合下列条件的情形下，授予使用者使用及再散播本
// 软件包装原始码及二进位可执行形式的权利，无论此包装是否经改作皆然：
//
// 1. 对于本软件源代码的再散播，必须保留上述的版权宣告、本条件列表，以
//    及下述的免责声明。
// 2. 对于本套件二进位可执行形式的再散播，必须连带以文件以及／或者其他附
//    于散播包装中的媒介方式，重制上述之版权宣告、本条件列表，以及下述
//    的免责声明。

// 免责声明：本软件是本软件版权持有人以及贡献者以现状（"as is"）提供，
// 本软件包装不负任何明示或默示之担保责任，包括但不限于就适售性以及特定目
// 的的适用性为默示性担保。版权持有人及本软件之贡献者，无论任何条件、
// 无论成因或任何责任主义、无论此责任为因合约关系、无过失责任主义或因非违
// 约之侵权（包括过失或其他原因等）而起，对于任何因使用本软件包装所产生的
// 任何直接性、间接性、偶发性、特殊性、惩罚性或任何结果的损害（包括但不限
// 于替代商品或劳务之购用、使用损失、资料损失、利益损失、业务中断等等），
// 不负任何责任，即在该种使用已获事前告知可能会造成此类损害的情形下亦然。
//-----------------------------------------------------------------------------
//所属模块:泛设备管理模块
//作者:  罗侍田.
//版本：V1.0.0
//文件描述:提供泛设备管理功能
//其他说明:
//修订历史:
//2. ...
//1. 日期: 2009-01-04
//   作者:  罗侍田.
//   新版本号: V1.0.0
//   修改说明: 原始版本
//------------------------------------------------------
#ifndef __DRIVER_H__
#define __DRIVER_H__

#include "errno.h"
#include "object.h"
#include "multiplex.h"

#ifdef __cplusplus
extern "C" {
#endif

#define CN_DEV_NAME_LIMIT   255     //设备名长度不能超过255字符
struct DjyDevice;
struct  Object;

#define D_RDONLY    1   //只读模式
#define D_WRONLY    2   //只写模式
#define D_RDWR      3   //读写模式

//泛设备模块出错代码，本enum常量从enum_drv_no_error开始依序增1.
enum _DRV_ERROR_CODE_
{
    EN_DRV_NO_ERROR = CN_DRV_NO_ERROR,  //没有错误
    EN_DRV_HANDLE_ERROR,                //句柄错误
    EN_DRV_HOMONYMY,                    //设备重名错误
    EN_DRV_DEV_DEL,                   //删除设备失败
};

//常用设备控制命令
#define CN_DRV_CTRL_START           0   //启动设备，有些能控制电源的设备需要
#define CN_DRV_CTRL_SHUTDOWN        1   //关闭电源,断电前需要特定处理的设备需要
#define CN_DRV_CTRL_SLEEP           2   //设备进入低功耗状态,用于电源管理
#define CN_DRV_CTRL_RESUME          3   //设备恢复,从低功耗状态唤醒
#define CN_DRV_CTRL_CHECK           4   //检查设备状态
#define CN_DRV_CTRL_SET_FUNC        5   //设置有输入/输出/错误时回调函数
#define CN_DRV_CTRL_SET_LEVEL       6   //设置设备事件读和写触发水平

#define CN_DRV_CTRL_USER            0x80   //自定义的设备控制命令，从0x100开始
//用户定义控制命令常数，请从0x80开始，例如:
//#define CN_XXX_CTRL_MYCMD1        (CN_DRV_CTRL_USER+0)
//#define CN_XXX_CTRL_MYCMD2        (CN_DRV_CTRL_USER+1)

//定义dev_Write的完成条件(block_option参数)，达到条件后，函数返回。
#define CN_BLOCK_BUFFER         0       //dev_WriteDevice的完成条件是发送到缓冲区
#define CN_BLOCK_COMPLETE       1       //dev_WriteDevice的完成条件是传输完成

//操纵设备时，通过这些指针，间接调用设备驱动提供的函数。
//返回值:成功写入的字节数。
//以串口为例，如果调用dev_WriteDevice时BlockOption = CN_BLOCK_BUFFER，则返回值表
//示函数返回时成功写入到设备缓冲区的数据量，并不确定是否已经从物理串口传输出去了。
//如果BlockOption = CN_BLOCK_COMPLETE，则能确保传输完成才返回。
//这个特性对485通信特别有用，因为RS485需要控制收发切换，
typedef u32 (*fntDevWrite)(ptu32_t PrivateTag,u8 *buf,
                           u32 len,u32 offset,bool_t BlockOption,u32 timeout);
//返回值:成功读取的字节数
typedef u32 (*fntDevRead) (ptu32_t PrivateTag,u8 *buf,
                                   u32 len,u32 offset,u32 timeout);
//返回值:收到不支持的命令，返回-1，0表示成功执行，其他返回值的含义自定
typedef u32 (*fntDevCtrl) (ptu32_t PrivateTag,u32 cmd,
                                     ptu32_t data1,ptu32_t data2);
//返回值:true=成功执行，false=失败。
//SendsingBit设为0表示从MultiplexSets中删除该设备
typedef bool_t (*fntDevMultiplexAdd) (ptu32_t PrivateTag,
                                       struct MultiplexSetsCB *MultiplexSets,
                                       struct DjyDevice *Dev,
                                       u32 SensingBit);
#define DEV_READ_MUTEX_SYS      1       //bit0,1=读设备的互斥量是系统分配的。
#define DEV_WRITE_MUTEX_SYS     2       //bit1,1=写设备的互斥量是系统分配的。
//注意，不提供dev_open、dev_close两个函数，如果有些设备需要在open时调用dev_open
//完成一些设置工作的，可用dev_Ctrl函数的CN_DRV_CTRL_START命令。同理，也不提供
//dev_close接口
struct DjyDevice
{
    struct  Object Node;
    fntDevWrite  dWrite;
    fntDevRead   dRead;
    fntDevCtrl   dCtrl;
    fntDevMultiplexAdd dMultiplexAdd;   //若设备driver不支持多路复用，请置空。
    struct MutexLCB *dReadMutex;        //互斥量,控制设备独占式读访问
    struct MutexLCB *dWriteMutex;       //互斥量,控制设备独占式写访问
    u32    MutexFlag;                   //标志互斥量是用户提供的,还是系统分配的。
                                        //见DEV_READ_MUTEX_SYS的定义
//  u32 ProtectCounter;                 //删除锁，大于 0 表示该设备不能删除
    u32 OpenCounter;                    //打开计数，大于 0 表示该设备被打开，不
                                        //能删除.读写方式打开独立计算，即“读”
                                        //方式打开+1，“写”方式打开也+1，“读写”
                                        //方式打开则+2
    ptu32_t PrivateTag;                 //本设备特征的数据，在创建设备时，参数传入
    ptu32_t UserTag;                    //用户特征数据，用户使用过程中设置
};

ptu32_t ModuleInstall_Driver(ptu32_t para);
struct DjyDevice * Driver_DeviceCreate(  struct DjyDevice *         ParentDevice,
                                const char              *name,
                                struct MutexLCB      *dReadMutex,
                                struct MutexLCB      *dWriteMutex,
                                fntDevWrite            WriteFunc ,
                                fntDevRead             ReadFunc,
                                fntDevCtrl             Ctrl ,
                                fntDevMultiplexAdd     MultiplexAdd,
                                ptu32_t                 tag);
bool_t Driver_ProtectDevice(u32 DevAlias);
bool_t Driver_UnProtectDevice(u32 DevAlias);
bool_t Driver_DeleteDevice(struct DjyDevice * handle);
struct DjyDevice *Driver_FindDevice(const char * name);
struct DjyDevice *Driver_FindScionDevice(struct DjyDevice * ancestor,const char * scion_name);
struct DjyDevice * Driver_OpenDevice(const char *name,u32 flags,u32 timeout);
struct DjyDevice * Driver_OpenScionDevice(struct DjyDevice * ancestor,
                                const char *scion_name,u32 flags, u32 timeout);
struct DjyDevice * Driver_OpenDeviceFast(struct DjyDevice *Device,u32 flags,u32 timeout);
bool_t Driver_CloseDevice(struct DjyDevice * handle);
u32 Driver_ReadDevice(struct DjyDevice * handle,u8 *buf,u32 len,u32 offset,u32 timeout);
u32 Driver_WriteDevice(struct DjyDevice * handle,u8 *buf,
                  u32 len,u32 offset,bool_t BlockOption,u32 timeout);
u32 Driver_CtrlDevice(struct DjyDevice * handle,u32 cmd,ptu32_t data1,ptu32_t data2);
u32 Driver_MultiplexCtrl(struct DjyDevice * Dev,u32 *ReadLevel,u32 *WriteLevel);
u32 Driver_MultiplexAdd(struct MultiplexSetsCB *MultiplexSets,
                        struct DjyDevice **Dev,u32 num,u32 SensingBit);
void Driver_MultiplexDel(struct MultiplexSetsCB *MultiplexSets,
                         struct DjyDevice **Dev,u32 num);
void Driver_SetUserTag(struct DjyDevice * Dev,ptu32_t tag);
ptu32_t Driver_GetUserTag(struct DjyDevice * Dev);

#ifdef __cplusplus
}
#endif
#endif //__DRIVER_H___
