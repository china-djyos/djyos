//-----------------------------------------------------------------------------
// Copyright (c) 2018, Djyos Open source Development team. All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. As a constituent part of djyos,do not transplant it to other software
//    without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------
// Copyright (c) 2018，著作权由都江堰操作系统开源开发团队所有。著作权人保留一切权利。
//
// 这份授权条款，在使用者符合以下三条件的情形下，授予使用者使用及再散播本
// 软件包装原始码及二进位可执行形式的权利，无论此包装是否经改作皆然：
//
// 1. 对于本软件源代码的再散播，必须保留上述的版权宣告、本条件列表，以
//    及下述的免责声明。
// 2. 对于本套件二进位可执行形式的再散播，必须连带以文件以及／或者其他附
//    于散播包装中的媒介方式，重制上述之版权宣告、本条件列表，以及下述
//    的免责声明。
// 3. 本软件作为都江堰操作系统的组成部分，未获事前取得的书面许可，不允许移植到非
//    都江堰操作系统环境下运行。

// 免责声明：本软件是本软件版权持有人以及贡献者以现状（"as is"）提供，
// 本软件包装不负任何明示或默示之担保责任，包括但不限于就适售性以及特定目
// 的的适用性为默示性担保。版权持有人及本软件之贡献者，无论任何条件、
// 无论成因或任何责任主义、无论此责任为因合约关系、无过失责任主义或因非违
// 约之侵权（包括过失或其他原因等）而起，对于任何因使用本软件包装所产生的
// 任何直接性、间接性、偶发性、特殊性、惩罚性或任何结果的损害（包括但不限
// 于替代商品或劳务之购用、使用损失、资料损失、利益损失、业务中断等等），
// 不负任何责任，即在该种使用已获事前告知可能会造成此类损害的情形下亦然。
//-----------------------------------------------------------------------------

#ifndef __OBJFILE_H__
#define __OBJFILE_H__

#ifdef __cplusplus
extern "C" {
#endif
#include <stddef.h>
#include <list.h>
#include <fcntl.h>
#include <unistd.h>
#include <stat.h>
#include "object.h"

// 命名为对象句柄：
// 对象系统中，句柄是read/write对象的接口，一个object允许多个用户使用多个句柄
// read/write。一个文件在系统中，只会占用一个object结构，object不能直接被访问。
// 访问文件必须使用struct objhandle。文件可以被多次打开，根据文件系统的具体实
// 现，可能每次打开都分配一个struct objhandle结构，也可能共用一个 struct objhandle结构。
// fd与struct objhandle一一对应。
// 注意，一个打开的文件，其路径上的目录，即使没有打开，也会分配一个object，但不会
// 分配struct objhandle结构。

struct objhandle{
    list_t list;        //句柄所关联的对象的句柄链表；
    u32 flags;          // 当前文件操作标志；
    struct obj *obj;    // 关联的对象
    u32 timeout; // 同步访问的timeout，单位us，不超过1.19小时；
    struct MultiplexObjectCB * pMultiplexHead; // 多路复用目标对象头指针；
    u32 MultiplexEvents; // 对象的当前访问状态，如可读，可写等。24bit，高8位无效，可用于多路复用；
    ptu32_t tag;        //用户标签，由用户设定该标签用途；
    ptu32_t context;    // handle访问上下文
};

// ============================================================================
// 功能：对象句柄转文件描述符；
// 参数：hdl -- 内部句柄；
// 返回：成功（文件描述符）；失败（-1）；
// 备注：
// ============================================================================
s32 Handle2fd(struct objhandle *hdl);

// ============================================================================
// 功能：文件描述符转对象句柄
// 参数：fd -- 文件描述符；
// 返回：成功（对象句柄）；失败（NULL）；
// 备注：
// ============================================================================
struct objhandle *fd2Handle(s32 fd);

// ============================================================================
// 功能：是否目录标志；
// 参数：flags -- 文件使用标志；
// 返回：目录（1）；非目录（0）；
// 备注：
// ============================================================================
s32 test_directory(u32 flags);

// ============================================================================
// 功能：是否文件标志；
// 参数：flags -- 使用标志；
// 返回：文件（1）；非文件（0）；
// 备注：
// ============================================================================
s32 test_regular(u32 flags);

// ============================================================================
// 功能：是否创建或打开标志；
// 参数：flags -- 使用标志；
// 返回：创建或打开（1）；非创建或打开（0）；
// 备注：
// ============================================================================
s32 test_creat(u32 flags);

// ============================================================================
// 功能：是否仅创建标志；
// 参数：flags -- 使用标志；
// 返回：仅创建（1）；非仅创建（0）；
// 备注：
// ============================================================================
s32 test_onlycreat(u32 flags);

// ============================================================================
// 功能：是否追加标志；
// 参数：flags -- 使用标志；
// 返回：追加（1）；非追加（0）；
// 备注：
// ============================================================================
s32 test_append(u32 flags);

// ============================================================================
// 功能：是否截断标志；
// 参数：flags -- 使用标志；
// 返回：截断（1）；非截断（0）；
// 备注：INLINE
// ============================================================================
s32 test_trunc(u32 flags);

// ============================================================================
// 功能：是否可读标志；
// 参数：flags -- 文件使用标志；
// 返回：可读（1）；非可读（0）；
// 备注：
// ============================================================================
s32 test_readable(u32 flags);

// ============================================================================
// 功能：是否可写标志；
// 参数：flags -- 文件使用标志；
// 返回：可写（1）；非可写（0）；
// 备注：
// ============================================================================
s32 test_writeable(u32 flags);

// ============================================================================
// 功能：对象句柄关联的文件是否是目录；
// 参数：hdl -- 对象句柄；
// 返回：目录（1）；非目录（0）；
// 备注：
// ============================================================================
s32 isdirectory(struct objhandle *hdl);

// ============================================================================
// 功能：对象句柄是否追加模式；
// 参数：hdl -- 对象句柄；
// 返回：追加（1）；非追加（0）；
// 备注：
// ============================================================================
s32 isappend(struct objhandle *hdl);

// ============================================================================
// 功能：对象句柄是否可读模式；
// 参数：hdl -- 对象句柄；
// 返回：可读（1）；不可读（0）；
// 备注：
// ============================================================================
s32 isreadable(struct objhandle *hdl);

// ============================================================================
// 功能：对象句柄是否可写模式；
// 参数：hdl -- 对象句柄；
// 返回：可读（1）；不可读（0）；
// 备注：
// ============================================================================
s32 iswritable(struct objhandle *hdl);

// ============================================================================
// 功能：对象是否存在竞争者，即对象被其他地方同时打开
// 参数：hdl -- 对象句柄；
// 返回：存在（1）；不存在（0）；
// 备注：
// ============================================================================
s32 iscontender(struct objhandle *hdl);

// ============================================================================
// 功能：新建对象句柄；
// 参数：无；
// 返回：成功（对象句柄）；失败（NULL）；
// 备注：
// ============================================================================
struct objhandle *handle_new(void);

// ============================================================================
// 功能：释放对象句柄；
// 参数：hdl -- 对象句柄；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 handle_free(struct objhandle *hdl);

// ============================================================================
// 功能：对象句柄的初始化；
// 参数：hdl -- 对象句柄；
//      ob -- 关联的对象；
//      flags -- 使用标志；
//      context -- 关联的内容；
// 返回：无；
// 备注：
// ============================================================================
void handle_init(struct objhandle *hdl, struct obj *ob, u32 flags, ptu32_t context);

// ============================================================================
// 功能：获取对象名；
// 参数：hdl -- 对象句柄
// 返回：成功（文件名）；失败（NULL）；
// 备注：
// ============================================================================
const char *handle_name(struct objhandle *hdl);

// ============================================================================
// 功能：获取对象句柄关联的内容；
// 参数：hdl -- 对象句柄；
// 返回：成功（私有内容）；失败（NULL）;
// 备注：
// ============================================================================
ptu32_t handle_context(struct objhandle *hdl);

// ============================================================================
// 功能：设置对象句柄关联的内容；
// 参数：hdl -- 对象句柄；
//      context -- 内容；
// 返回：无；
// 备注：
// ============================================================================
void handle_linkcontext(struct objhandle *hdl, ptu32_t context);

// ============================================================================
// 功能：获取对象句柄的值（即对象的值）；
// 参数：hdl -- 对象句柄；
// 返回：成功（文件）；失败（NULL）；
// 备注：
// ============================================================================
void *handle_val(struct objhandle *hdl);

// ============================================================================
// 功能：获取对象句柄所在系统的管理控制；
// 参数：hdl -- 文件上下文；
// 返回：成功（系统的管理信息）；失败（NULL）；
// 备注：
// ============================================================================
void *handle2sys(struct objhandle *hdl);

// ============================================================================
// 功能：将对象句柄与对象关联；
// 参数：hdl -- 对象句柄；
//      ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 handle_linkobj(struct objhandle *hdl, struct obj *ob);

// ============================================================================
// 功能：获取对象句柄的多路复用控制；
// 参数：hdl -- 对象句柄；
// 返回：成功（多路复用控制）；失败（NULL）；
// 备注：
// ============================================================================
struct MultiplexObjectCB *handle_multiplex(struct objhandle *hdl);

// ============================================================================
// 功能：设置对象句柄的多路复用控制；
// 参数：hdl -- 对象句柄；
//      cb -- 多路复用控制；
// 返回：无；
// 备注：
// ============================================================================
void handle_setmultiplex(struct objhandle *hdl, struct MultiplexObjectCB *cb);

// ============================================================================
// 功能：获取对象句柄的超时时间；
// 参数：hdl -- 对象句柄；
// 返回：超时时间；
// 备注：
// ============================================================================
u32 handle_timeout(struct objhandle *hdl);

// ============================================================================
// 功能：设置对象句柄的超时时间；
// 参数：hdl -- 对象句柄；
//      timeout -- 超时时间；
// 返回：无；
// 备注：
// ============================================================================
void handle_settimeout(struct objhandle *hdl, u32 timeout);

// ============================================================================
// 功能：获取对象句柄的使用标志；
// 参数：hdl -- 对象句柄；
// 返回：使用标志；
// 备注：INLINE
// ============================================================================
u32 handle_mode(struct objhandle *hdl);

// ============================================================================
// 功能：设置对象句柄的使用标志；
// 参数：hdl -- 对象句柄；
//      mode -- 使用标志；
// 返回：无；
// 备注：INLINE
// ============================================================================
void handle_changemode(struct objhandle *hdl, u32 mode);

// ============================================================================
// 功能：获取对象句柄的关联对象；
// 参数：hdl -- 对象句柄；
// 返回：成功（关联对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *handle2obj(struct objhandle *hdl);

// ============================================================================
// 功能：获取对象句柄的已设置的多路复用触发事件；
// 参数：hdl -- 对象句柄；
// 返回：已设置的多路复用事件；
// 备注：
// ============================================================================
u32 handle_multievents(struct objhandle *hdl);

// ============================================================================
// 功能：设置对象句柄的多路复用触发事件；
// 参数：hdl -- 对象句柄；
//      events -- 多路复用触发事件；
// 返回：无；
// 备注：
// ============================================================================
void handle_set_multievent(struct objhandle *hdl, u32 events);

// ============================================================================
// 功能：清除对象句柄的多路复用触发事件；
// 参数：hdl -- 对象句柄；
//      events -- 多路复用触发事件；
// 返回：无；
// 备注：
// ============================================================================
void handle_unset_multievent(struct objhandle *hdl, u32 events);
#ifdef __cplusplus
}
#endif

#endif/* __OBJFILE_H__ */
