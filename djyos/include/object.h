//----------------------------------------------------
// Copyright (c) 2018, Djyos Open source Development team. All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------
// Copyright (c) 2018 著作权由都江堰操作系统开源开发团队所有。著作权人保留一切权利。
//
// 这份授权条款，在使用者符合下列条件的情形下，授予使用者使用及再散播本
// 软件包装原始码及二进位可执行形式的权利，无论此包装是否经改作皆然：
//
// 1. 对于本软件源代码的再散播，必须保留上述的版权宣告、本条件列表，以
//    及下述的免责声明。
// 2. 对于本套件二进位可执行形式的再散播，必须连带以文件以及／或者其他附
//    于散播包装中的媒介方式，重制上述之版权宣告、本条件列表，以及下述
//    的免责声明。

// 免责声明：本软件是本软件版权持有人以及贡献者以现状（"as is"）提供，
// 本软件包装不负任何明示或默示之担保责任，包括但不限于就适售性以及特定目
// 的的适用性为默示性担保。版权持有人及本软件之贡献者，无论任何条件、
// 无论成因或任何责任主义、无论此责任为因合约关系、无过失责任主义或因非违
// 约之侵权（包括过失或其他原因等）而起，对于任何因使用本软件包装所产生的
// 任何直接性、间接性、偶发性、特殊性、惩罚性或任何结果的损害（包括但不限
// 于替代商品或劳务之购用、使用损失、资料损失、利益损失、业务中断等等），
// 不负任何责任，即在该种使用已获事前告知可能会造成此类损害的情形下亦然。
//-----------------------------------------------------------------------------
//所属模块: 资源管理
//作者:  罗侍田.
//版本：V1.0.0
//文件描述: 创建、添加、移动、删除、搜索资源结点的服务
//其他说明:
//修订历史:
//2. ...
//1. 日期: 2009-01-04
//   作者:  罗侍田.
//   新版本号: V1.0.0
//   修改说明: 原始版本
//------------------------------------------------------
#ifndef __OBJECT_H__
#define __OBJECT_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <list.h>
#include <fcntl.h>

// ************************************************************************** //
// ************************** 对象操作方法函数说明(规约) *********************** //
// ************************************************************************** //

enum objops{
    // ========================================================================
    // 功能：打开对象；
    // 参数：cmd -- OBJOPEN
    //      ob -- 目标对象；
    //      flags -- 打开模式；
    //      uncached -- 目标对象路径（未缓存部分）；
    //      mode -- 打开控制；
    //      full -- 目标对象所在系统的全路径；
    // 返回：成功（对象句柄）；失败（NULL）；
    // 备注：
    // ========================================================================
    OBJOPEN = 1,
    // ========================================================================
    // 功能：关闭对象；
    // 参数：cmd -- OBJCLOSE
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    // 返回：成功（0）；失败（-1）；
    // 备注：
    // ========================================================================
    OBJCLOSE,
    // ========================================================================
    // 功能：读对象；
    // 参数：cmd -- OBJREAD
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      buf -- 读缓存；
    //      size -- 读长度（字节计）；
    // 返回：成功（实际读取到的长度）；错误（-1）；
    // 备注：
    // ========================================================================
    OBJREAD,
    // ========================================================================
    // 功能：写对象；
    // 参数：cmd -- OBJWRITE
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      buf -- 写缓存；
    //      size -- 读长度（字节计）；
    // 返回：成功（实际写入的长度）；错误（-1）；
    // 备注：
    // ========================================================================
    OBJWRITE,
    // ========================================================================
    // 功能：对象（作为文件）的当前位置重定位；
    // 参数：cmd -- OBJSEEK
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      *offset -- 新的位置偏置指针；
    //      whence -- 重定位起始；
    // 返回：成功（0）；错误（-1）；
    // 备注：同时时，*offset指向当前位置；
    // ========================================================================
    OBJSEEK,
    // ========================================================================
    // 功能：获取对象（作为文件）的当前位置
    // 参数：cmd -- OBJTELL；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      *offset -- 文件的当前位置（返回值）；
    // 返回：成功（0）；失败（-1）；
    // 备注：
    // ========================================================================
    OBJTELL,
    // ========================================================================
    // 功能：删除（释放）对象
    // 参数：cmd -- OBJDEL；
    //      ob -- 删除对象；
    //      uncached -- 删除对象的路径（未缓存部分）；
    //      full -- 删除对象所在系统的全路径；
    // 返回：成功（0）；失败（-1）；
    // 备注：
    // ========================================================================
    OBJDEL,
    // ========================================================================
    // 功能：查询对象信息
    // 参数：cmd -- OBJSTAT；
    //      ob -- 查询对象；
    //      buf -- 信息缓存；
    //      uncache -- 查询对象路径（未缓存部分）；如果uncache==0,下一个参数是对象句柄；
    //                 否则，下一个对象是全路径；
    //      full_hdl -- 对象句柄或对象所在系统的全路径；
    // 返回：成功（0）；失败（-1）；
    // 备注：
    // ========================================================================
    OBJSTAT,
    // ========================================================================
    // 功能：对象截断；
    // 参数：cmd -- OBJTRUNC；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    // 返回：
    // 备注：
    // ========================================================================
    OBJTRUNC,
    // ========================================================================
    // 功能：遍历对象的子对象信息；
    // 参数：cmd -- OBJCHILDS；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      *child_infos -- 子对象信息（返回值）；
    // 返回：成功（0）；全部遍历完（1）；出错（-1）；
    // 备注：
    // ========================================================================
    OBJCHILDS,
    // ========================================================================
    // 功能：强制对象同步
    // 参数：cmd -- OBJSYNC；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    // 返回：成功（0）；失败（-1）；
    // 备注：
    // ========================================================================
    OBJSYNC,
    // ========================================================================
    // 功能：对象控制；
    // 参数：cmd -- OBJCTL；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      args -- 具体命令的参数；
    // 返回：
    // 备注：对接fcntl接口
    // ========================================================================
    OBJCTL,
    // ========================================================================
    // 功能：对象控制；
    // 参数：cmd -- OBJIOCTL；
    //      handle -- 对象句柄（OBJOPEN的返回值）；
    //      args -- 具体命令的参数；
    // 返回：
    // 备注：对接iocntl接口，为了与各操作系统兼容，所以单独列出；
    // ========================================================================
    OBJIOCTL,
    // ========================================================================
    // 功能：未支持的操作
    // 参数：
    // 返回：
    // 备注：
    // ========================================================================
    OBJUNSUPPORTED = -1,
};



//Target根据cmd不同，有两种可能，struct obj*，或struct objhandle*，在实现
//时使用强制类型转换。
//struct obj*：CN_OBJ_CMD_OPEN、CN_OBJ_CMD_SHOW、CN_OBJ_CMD_READDIR、
//                CN_OBJ_CMD_DELETE、CN_OBJ_CMD_STAT
//struct ObjectPort*：其他命令

//对于4个参数不够用的情况，para2有两种应对方案。
//1、使用va_list *；2、用结构指针
typedef ptu32_t (*fnObjOps)(enum objops ops, ptu32_t oof, ptu32_t args, ...);
//不同命令参数含义：
//-----------------CN_OBJ_CMD_OPEN---------------------------------
//功能：打开文件（目录）
// target：struct obj *，待打开的path中已经在Object队列中的最后一个Object
// para1：path中target后的部分，可能是NULL。
// para2：u64*，低32位是open调用的oflag参数，高32位仅当 cmd == O_CREAT 时有用，
//        表示文件访问权限， S_ISUID 系列常数，stat.h中定义
//-----------------CN_OBJ_CMD_READ---------------------------------
//功能：读文件
// target：struct ObjectPort * 类型，被读取的文件指针
// para1：接收数据的 buf 指针。
// para2：buf 的尺寸。
//----------------CN_OBJ_CMD_WRITE---------------------------------
//功能：写文件
// target：struct ObjectPort * 类型，被写入的文件指针
// para1：写入数据的 buf 指针。
// para2：写入数据的长度。
//----------------CN_OBJ_CMD_CLOSE---------------------------------
//功能：关闭文件（目录）
// target：struct ObjectPort * 类型，被关闭的文件指针
// para1：无用。
// para2：无用。
//----------------CN_OBJ_CMD_SHOW----------------------------------
//功能：显示文件（目录）内容，注意，目录的内容，不是子目录列表，可能是目录的说明，
//      也可能是其他内容，由CN_OBJ_CMD_SHOW目录的实现者决定
// target：struct obj * 类型，被显示的object指针
// para1：显示参数。
// para2：无用。
//----------------CN_OBJ_CMD_SEEK----------------------------------
//功能：移动文件指针
// target：struct ObjectPort * 类型，被操作的文件指针
// para1：off_t *，目标偏移量。
// para2：偏移参考，SEEK_SET、SEEK_CUR、SEEK_END 之一。
#if 0
//对象操作命令定义，新增不能超过CN_OBJ_CMD_USER，否则整个系统需要重新编译。
//16bit，fnObjOps长度参数cmd是32位数，其中高16位表示命令码所需的参数长度。
//参数长度用于向内核态 copy 参数时使用，用户定义命令码时无须关心。
#define CN_OBJ_CMD_OPEN             0   // 打开文件。(返回：正常：struct ObjectPort 指针；出错：NULL；)
#define CN_OBJ_CMD_READ             1   // 读文件。(返回：读出的数据量；出错：-1。)
#define CN_OBJ_CMD_WRITE            2   // 写文件。返回：写入的数据量，出错：-1
#define CN_OBJ_CMD_CLOSE            3   // 关闭文件。返回：正常：0；文件类型错误：-2，其他错误：-1
#define CN_OBJ_CMD_SHOW             4   // 返回：正常：0，出错：-1
#define CN_OBJ_CMD_CRTL             5   // 控制文件；返回：由控制命令具体定义
#define CN_OBJ_CMD_SEEK             6   // 重定位文件。(返回：正常：0，出错：-1)
#define CN_OBJ_CMD_TELL             7   // 。(返回：正常：0；出错：-1)
#define CN_OBJ_CMD_DELETE           8   // 删除文件。(返回：正常：0；出错：-1)
#define CN_OBJ_CMD_STAT             9   // 返回：正常：0，出错：-1
#define CN_OBJ_CMD_TRUNCATE         10  // 返回：正常：0，出错：-1
#define CN_OBJ_CMD_READDIR          11  // 返回：正常：0，出错：-1，完成：1
#define CN_OBJ_CMD_SYNC             12  // 返回：正常：0，出错：-1，完成：1
#define CN_OBJ_CMD_MULTIPLEX_ADD    13  // 返回：正常：0，出错：-1，完成：1
#define CN_OBJ_CMD_FILE_SPECIAL     14  // 返回：参看 CN_FILE_STATICDATA 等
#define CN_OBJ_CMD_FSTAT            15  // 返回：正常：0，出错：-1

#define CN_OBJ_FCNTL_START          0x1000 // fcntl 命令组起始命令
#define CN_OBJ_IOCTL_START          0x2000 // ioctl 命令组起始命令
#define CN_OBJ_CMD_USER             0xF000 // 用户自定义命令起始值，由用户写的驱动程序解释，不同模块可以定义重复的值

//建议（非强制）：遇到不支持的命令时 fnObjOps 函数返回值。
#define CN_OBJ_CMD_UNSUPPORT        (-1)

typedef fnObjOps    tagObjOps;
#endif
union __rights{
    struct __bit{
        u32 r:1; // 可读；
        u32 w:1; // 可写；
        u32 x:1; // 可执行；
        u32 lock:1; // 对象锁定，禁止新的访问；
        u32 res:12; // 保留；
        u32 muses:16; // 多用户同时引用计数，值为-1时，表示访问用户过多，就禁止访问；
    }b;
    u32 a;
};

struct obj
{
    char *name; // 对象名；当用于文件系统为文件名或目录名，用于设备是设备名，用于gui则是窗口名；
    ptu32_t ObjPrivate;    // 对象私有数据；可以指向描述对象的结构；
    fnObjOps ops;          // 对象方法；即对象的操作；
    union __rights rights; // 对象权限管理；
    list_t handles; // 对象句柄链表；对象被用户引用，系统会给用户分配一个句柄；被IO系统引用时，指向port链表；
    struct obj *prev,*next, *parent, *child; // 对象关系；构建对象树；
    struct obj *seton; // 对象关系；某个新的对象集合(类)建立于某个旧对象之上，形成一个闭环单向链；
                       // 当具体文件系统被mount到某对象；原节点在这里备份，以备unmount时恢复旧对象。
                       // -1被作为特别用处，表示该对象之上不可建立新的对象集合（类）；
    struct obj *set;   // 对象关系；集合点（类）；如果对象本身就是对象集合（类），则指向自己；其他则指向对象的集合点（类）；
};


// ************************************************************************** //
// ****************************** 对象系统函数接口 ***************************** //
// ************************************************************************** //
// ============================================================================
// 功能：获取对象的集合点；
// 参数：ob -- 对象；
// 返回；集合点；
// 备注：
// ============================================================================
struct obj *obj_set(struct obj *ob);

// ============================================================================
// 功能：获取对象的值；
// 参数：ob -- 对象；
// 返回：对象的值；
// 备注：
// ============================================================================
ptu32_t obj_GetPrivate(struct obj *ob);

// ============================================================================
// 功能：设置对象的值；
// 参数：ob -- 对象；
//      represent -- 对象的值；
// 返回：无；
// 备注：
// ============================================================================
void obj_setval(struct obj *ob, ptu32_t Private);

// ============================================================================
// 功能：获取对象操作；
// 参数：ob -- 对象；
// 返回：成功（对象操作）；失败（NULL）；
// 备注：
// ============================================================================
fnObjOps obj_ops(struct obj *ob);

// ============================================================================
// 功能：设置对象操作；
// 参数：ob -- 对象；
//      ops -- 对象操作；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_setops(struct obj *ob, fnObjOps ops);

// ============================================================================
// 功能：获取对象的引用关系；
// 参数：ob -- 对象；
// 返回：对象的引用关系；
// 备注：
// ============================================================================
list_t *obj_quote(struct obj *ob);

// ============================================================================
// 功能：设置对象的引用关系；
// 参数：ob -- 对象；
//      quote -- 引用关系；
// 返回：无；
// 备注：
// ============================================================================
void obj_setquote(struct obj *ob, list_t *quote);

// ============================================================================
// 功能：对象名；
// 参数：ob -- 对象；
// 返回：成功（对象名）；失败（NULL）；
// 注意：
// ============================================================================
const char *obj_name(struct obj *ob);

// ============================================================================
// 功能: 获取对象的父关系对象；
// 参数: ob -- 对象；
// 返回: 成功（父节点），失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_parent(struct obj *ob);

// ============================================================================
// 功能：获取对象的子关系对象（同级子对象的链表链表头）
// 参数：ob -- 对象
// 返回：成功（子对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_child(struct obj *ob);

// ============================================================================
// 功能：获取对象的前一个对象（同级对象的链表之上成员）
// 参数：ob -- 对象；
// 返回：成功（前一个对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_prev(struct obj *ob);

// ============================================================================
// 功能：获取对象的后一个对象（对象链表之上成员）
// 参数：ob -- 对象；
// 返回：成功（后一个对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_next(struct obj *ob);

// ============================================================================
// 功能：获取同级对象的链表的首成员
// 参数：ob -- 对象；
// 返回：成功（后一个对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_head(struct obj *ob);

// ============================================================================
// 功能：获取对象在对象体系中的等级（深度）；
// 参数：ob -- 对象；
// 返回：成功（深度）；失败（-1）；
// 备注：根表示0级，根的子关系对象表示1级，根的子关系对象的子关系对象表示2级；......
// ============================================================================
s32 obj_level(struct obj *ob);

// ============================================================================
// 功能：对象是否是同级链表的头成员；
// 参数：ob -- 对象；
// 返回：是（1）；否（0）；
// 备注：
// ============================================================================
s32 obj_ishead(struct obj *ob);

// ============================================================================
// 功能：对象是否是同级链表的尾成员；
// 参数：ob -- 对象；
// 返回：是（1）；否（0）；
// 备注：
// ============================================================================
s32 obj_islast(struct obj *ob);

// ============================================================================
// 功能：对象是否被使用中；
// 参数：ob -- 对象；
// 返回：文件使用中（1）；文件未使用（0）
// 备注：
// ============================================================================
s32 obj_isonduty(struct obj *ob);

// ============================================================================
// 功能：对象是否是对象集合点；
// 参数：ob -- 对象；
// 返回：是（1）；否（0）；
// 备注：
// ============================================================================
s32 obj_isset(struct obj *ob);

// ============================================================================
// 功能：对象是否被引用；
// 参数：ob -- 对象；
// 返回：是（1）；否（0）；
// 备注：不包括对象关系
// ============================================================================
s32 obj_isquoted(struct obj *ob);

// ============================================================================
// 功能：对象是否是临时建立的；
// 参数：ob -- 对象；
// 返回：是（1）；否（0）；
// 备注：
// ============================================================================
s32 obj_istmp(struct obj *ob);

// ============================================================================
// 功能：是否允许建立新的对象集合；
// 参数：ob -- 对象；
// 返回：允许（1）；不允许（0）；
// 备注：
// ============================================================================
s32 obj_testset(struct obj *ob);

// ============================================================================
// 功能：允许在对象上建立新的对象集合；
// 参数：ob -- 对象；
// 返回：成功允许（0）；不能允许（-1）；
// 备注：
// ============================================================================
s32 obj_allow2set(struct obj *ob);

// ============================================================================
// 功能：不允许的本对象上建立新的对象集合；
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_ban2set(struct obj *ob);

// ============================================================================
// 功能：将对象转为对象集合;
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_change2set(struct obj *ob);

// ============================================================================
// 功能：在对象parent之下新建子对象集合
// 参数：parent -- 对象；
//      name -- 对象集合点名 ；
//      ops -- 对象集合点的操作方式（NULL，继承父方法；-1，使用缺省方法；）；
//      represent -- 对象集合点的值；
//      rights -- 对象集合点的权限；
// 返回：成功（新建的子对象集合）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_newchild_set(struct obj *parent, const char *name, fnObjOps ops,
                             ptu32_t represent, u32 rights);

// ============================================================================
// 功能：对象上锁，禁止新访问；
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_lock(struct obj *ob);

// ============================================================================
// 功能：对象解锁；
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：INLINE
// ============================================================================
s32 obj_unlock(struct obj *ob);

// ============================================================================
// 功能：对象引用计数；
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_up(struct obj *ob);

// ============================================================================
// 功能：对象减引用计数；
// 参数：ob -- 对象；
// 返回：成功（0）；失败（-1）；
// 备注：有引用后则不可删除
// ============================================================================
s32 obj_down(struct obj *ob);

// ============================================================================
// 功能：删除对象
// 参数：ob -- 对象；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_del(struct obj *ob);

// ============================================================================
// 功能：将对象及其拓展（子对象等）从对象树关系上分离；
// 参数：branch -- 被删除的分支;
// 返回：成功（被分离的对象分支）;失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_detach(struct obj *branch);

// ============================================================================
// 功能：检查对象名的合法性；
// 参数：name -- 对象名；
// 返回：合法（0）；非法（-1）；
// 备注：检查规则：不允许存在'/'、'\'字符，长度不允许超过规定；
// ============================================================================
s32 obj_checkname(const char *name);

// ============================================================================
// 功能：匹配路径
// 参数：pPath -- 需匹配的路径；
//      left -- 完全匹配，为NULL；不完全匹配，则返回不匹配部分（保证不以'/'开头）；
//      full -- 从最近的安装点开始的匹配路径（同一个文件系统下的路径）；
// 返回：匹配路径所能检索到的结束对象。
// 备注：
// ============================================================================
struct obj *obj_matchpath(const char *match, char **left, char **full);

// ============================================================================
// 功能：构建基于对象的路径
// 参数：begin -- 开始对象节点；
//      path -- 需建立的临时路径；
// 返回：目标对象；
// 备注：
// ============================================================================
struct obj *obj_buildpath(struct obj *begin, char *path);

// ============================================================================
// 功能：释放对象构建的路径；
// 参数：start -- 路径开始的对象；
// 返回：释放了的对象数量；
// 备注：
// ============================================================================
s32 obj_releasepath(struct obj *start);

// ============================================================================
// 功能：新建一个对象集合替代对象；
// 参数：ob -- 对象（被替换）；
//      ops -- 对象集合的操作；
//      val -- 对象集合的值；
// 返回：成功（对象集合）；失败（NULL）；
// 备注：对象被新对象（集合点）代替后，就会从对象树上消失；正常的接口就不会查找到它；
// ============================================================================
struct obj *obj_replacebyset(struct obj *ob, fnObjOps ops, ptu32_t val);

// ============================================================================
// 功能：释放对象集合；
// 参数：setob -- 对象集合；
// 返回：被重构（被替代）的对象；
// 备注：
// ============================================================================
struct obj *obj_destoryset(struct obj *setob);

// ============================================================================
// 功能：对象系统的当前对象；
// 参数：
// 返回：对象系统的当前对象；
// 备注：
// ============================================================================
struct obj *objsys_current(void);

// ============================================================================
// 功能：设置对象系统的当前对象；
// 参数：ob -- 对象；
// 返回：无；
// 备注：
// ============================================================================
void objsys_setcurrent(struct obj *ob);

// ============================================================================
// 功能：获取对象系统的根对象；
// 参数：无；
// 返回：对象系统的根对象；
// 备注：
// ============================================================================
struct obj *objsys_root(void);

// ============================================================================
// 功能：设置对象系统的根对象；
// 参数：ob -- 对象；
// 返回：无；
// 备注：
// ============================================================================
void objsys_setroot(struct obj *ob);

// ============================================================================
// 功能：给对象新建一个prev关系对象；
// 参数：loc -- 对象；为空，则为当前设置对象；
//      ops -- 对象操作方法；为空，则继承；
//      rights -- 对象权限；为零，则继承；
//      represent -- 对象表示；
//      name -- 对象名字；为空，则使用系统默认名；
// 返回：成功（对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_newprev(struct obj *loc, fnObjOps ops, u32 rights,
                        ptu32_t represent, const char *name);

// ============================================================================
// 功能：为对象新建一个next关系对象；
// 参数：loc -- 对象；为空，则为当前设置对象；
//      ops -- 对象操作方法；为空，则继承；
//      rights -- 对象权限；为零，则继承；
//      represent -- 对象表示；
//      name -- 对象名字。为空，则使用系统默认名；
// 返回：成功（对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_newnext(struct obj *loc, fnObjOps ops, u32 rights,
                        ptu32_t represent, const char *name);

// ============================================================================
// 功能：新建子对象；
// 参数：parent -- 父对象；为空，则为当前设置对象；
//      ops -- 对象方法；为空，则继承；
//      rights -- 对象权限；为零，则继承；
//      represent -- 对象内容（表示）；
//      name -- 对象名；为空，则使用系统默认名；
// 返回：成功（新建子对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_newchild(struct obj *parent, fnObjOps ops, u32 rights,
                         ptu32_t represent, const char *name);

// ============================================================================
// 功能：给指定节点增加一个子节点,新节点将在队列头位置；
// 参数：loc -- 新节点的父节点；
//      ops -- 对象操作方法；
//      represent -- 对象表示；
//      pName -- 对象名字，所指定的字符串内存区不能释放，但可以是空；
// 返 回： 新加入的节点
// 备注：
// ============================================================================
struct obj *obj_newhead(struct obj *loc,fnObjOps ops, u32 rights,
                           ptu32_t represent, const char *name);

// ============================================================================
// 功能：将对象移动到队列尾；
// 参数：ob -- 对象；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_move2last(struct obj *ob);

// ============================================================================
// 功能：将对象移动到队列头；
// 参数：ob -- 对象；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_move2head(struct obj *ob);

// ============================================================================
// 功能：将对象（next）插入到对象(loc)的后（next）位置；
// 参数：loc -- 目标对象；
//      next -- 目标节点,它可能原本就在Object队列中；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_insert2next(struct obj *loc, struct obj *next);

// ============================================================================
// 功能：将对象（prev）插入到对象(loc)的前（previous）位置；
// 参数：loc -- 被插入的对象；
//      next -- 需插入的对象；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_insert2prev(struct obj *loc, struct obj *prev);

// ============================================================================
// 功能: 父对象的子对象的相对位置不变，将其子对象链表的队列头朝前（previous）方向移动一格。
// 参数：parent -- 父对象；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_child_move2prev(struct obj *parent);

// ============================================================================
// 功能: 父对象的子对象的相对位置不变，将子对象链表的队列头朝后（next）方向移动一格。
// 参数：parent -- 父对象；
// 返回：成功（0），失败（-1）；
// 备注：
// ============================================================================
s32 obj_child_move2next(struct obj *parent);

// ============================================================================
// 功能：遍历对象（parent）的所有子对象链表，每调用一次，返回一个子对象(current)，直至完成；
// 参数：parent -- 对象；
//      child -- 当前子对象。
// 返回：成功（子对象）；失败（NULL）
// 备注：data必须先初始化；如果data初始化为是某个子对象链表成员，则只遍历其到队列结束，而不是全部队列成员；
// ============================================================================
struct obj *obj_foreach_child(struct obj *parent, struct obj *child);

// ============================================================================
// 功能：遍历对象的所有子对象及其拓展对象（对象的子对象关系上延展的所有对象）；
// 参数：ancester -- 对象；
//      scion -- 当前遍历到的对象,
// 返回：当前搜索位置的下一个节点指针,如果已经搜索完成,则返回NULL.
// 备注：本函数按父、子、孙、曾孙....的顺序搜索，先搜直系，再搜旁系，确保所有子孙
//      节点都能够访问到，如果对访问顺序有特殊要求，不能使用本函数；
// ============================================================================
struct obj *obj_foreach_scion(struct obj *ancester, struct obj *scion);

// ============================================================================
// 功能：查找兄弟（同级链表上的）对象；
// 参数：ob -- 对象;.
//      name -- 需要搜索的对象名;
// 返回：成功（名为name的对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_search_sibling(struct obj *ob, const char *name);

// ============================================================================
// 功能：查找子对象；
// 参数：parent -- 对象；
//      name -- 需要搜索的对象名
// 返回：成功（名为name的对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_search_child(struct obj *parent, const char *name);

// ============================================================================
// 功能：查找对象的子关系及其拓展关系下的对象；
// 参数：ancester -- 对象；
//      name -- 需查找的对象名；
// 返回：成功（名为name的对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_search_scion(struct obj *ancester, const char *name);

// ============================================================================
// 功能：从对象（start）开始依据路径查找对象；
// 参数：start -- 路径的起始对象；
//      path -- 检索的对象路径；
// 返回：成功（路径结束的对象）；失败（NULL）；
// 备注：
// ============================================================================
struct obj *obj_search_path(struct obj *start, const char *path);

// ============================================================================
// 功能：设置对象的所有句柄的多路复用触发事件；
// 参数：ob -- 被操作的文件对象；
//      events -- 多路复用触发事件；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_set_handles_multievent(struct obj *ob, u32 events);

// ============================================================================
// 功能：清除对象的所有句柄的多路复用触发事件；
// 参数：ob -- 被操作的文件对象；
//      events -- 多路复用触发事件；
// 返回：成功（0）；失败（-1）；
// 备注：
// ============================================================================
s32 obj_clrmevent(struct obj *ob, u32 events);

#ifdef __cplusplus
}
#endif

#endif //__OBJECT_H__

