//----------------------------------------------------
// Copyright (c) 2018, Djyos Open source Development team. All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. As a constituent part of djyos,do not transplant it to other software
//    without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------
// Copyright (c) 2018，著作权由都江堰操作系统开源开发团队所有。著作权人保留一切权利。
//
// 这份授权条款，在使用者符合以下三条件的情形下，授予使用者使用及再散播本
// 软件包装原始码及二进位可执行形式的权利，无论此包装是否经改作皆然：
//
// 1. 对于本软件源代码的再散播，必须保留上述的版权宣告、本条件列表，以
//    及下述的免责声明。
// 2. 对于本套件二进位可执行形式的再散播，必须连带以文件以及／或者其他附
//    于散播包装中的媒介方式，重制上述之版权宣告、本条件列表，以及下述
//    的免责声明。
// 3. 本软件作为都江堰操作系统的组成部分，未获事前取得的书面许可，不允许移植到非
//    都江堰操作系统环境下运行。

// 免责声明：本软件是本软件版权持有人以及贡献者以现状（"as is"）提供，
// 本软件包装不负任何明示或默示之担保责任，包括但不限于就适售性以及特定目
// 的的适用性为默示性担保。版权持有人及本软件之贡献者，无论任何条件、
// 无论成因或任何责任主义、无论此责任为因合约关系、无过失责任主义或因非违
// 约之侵权（包括过失或其他原因等）而起，对于任何因使用本软件包装所产生的
// 任何直接性、间接性、偶发性、特殊性、惩罚性或任何结果的损害（包括但不限
// 于替代商品或劳务之购用、使用损失、资料损失、利益损失、业务中断等等），
// 不负任何责任，即在该种使用已获事前告知可能会造成此类损害的情形下亦然。
//-----------------------------------------------------------------------------
//author:zhangqf
//date  :上午11:53:03/2017年4月22日
//usage :
//-----------------------------------------------------------------------------
#include <stdint.h>
#include <stddef.h>
#include <stdio.h>

#include <osarch.h>
#include <os.h>
#include <sys/socket.h>
#include <device.h>

#define CN_IODEV_NAME "DEV1"

ptu32_t taskMqttApp()
{
    struct DjyDevice *dev;
    u8 buf[256];
    u32 len = 0;
    time_t logtime;

    dev = Driver_OpenDevice(CN_IODEV_NAME,O_RDWR,0);
    if(NULL != dev)
    {
        while(1)
        {
            len = Driver_ReadDevice(dev,buf,256,0,CN_TIMEOUT_FOREVER);
            if(len > 0)
            {
                logtime = time(NULL);
                printf("%s:%s:Read:0x%08x bytes\n\r",CN_IODEV_NAME,ctime(&logtime),len);
                //then write back
                len = Driver_WriteDevice(dev,buf,len,0,CN_BLOCK_BUFFER,0);
                if(len > 0)
                {
                    printf("%s:%s:Write:0x%08x bytes Ok\n\r",CN_IODEV_NAME,ctime(&logtime),len);
                }
                else
                {
                    printf("%s:%s:Write:0x%08x bytes Err\n\r",CN_IODEV_NAME,ctime(&logtime),len);
                }
            }
        }
    }
    else
    {
        printf("Open Device %s failed\n\r",CN_IODEV_NAME);
    }
    return 0;
}

bool_t mqttappstart(void)
{
    taskcreate("mqttapptask",0x1000,200,taskMqttApp,NULL);

    return true;
}



//work flow:mqttinstall->add mqtt device ->configure the device->enable the device
//usage:use this function to do the mqtt  module initialize
static void *pMqtt = NULL;
bool_t MqttDevHook(ptu32_t handle,enNetDevEvent event)
{
    if(event == EN_NETDEVEVENT_LINKUP)
    {
        printf("MQTT CONNECT SUCCESS\n\r");
    }
    else
    {
        printf("MQTT DISCONNECT\n\r");
//      mqttstart(pMqtt);       //if you need to start the mqtt again,please decomment the line
    }
    return true;
}
int mqttApp(void)
{
    bool_t result = false;
    //initialize the mqtt service here
    extern int mqttserviceinit(void);
    mqttserviceinit();
    //create a mqtt example here
    extern void * mqttcreate(char *devname,char *id,char *host,char *user,char *passwd,\
            char *subtopic,char *pubtopic,fnNetDevEventHook hook,bool_t debug);
    pMqtt=mqttcreate(CN_IODEV_NAME,"dev1","14.23.62.182","123456","123456",\
            "broker/chang_yuan/device/dev1","broker/chang_yuan/console/dev1",MqttDevHook,true);
    if(pMqtt == NULL)
    {
        result = false;
    }
    else
    {
        //if you wang to changge the sub or pub topics, you could set the pubtopic or the subtopicshere
        extern bool_t mqttsetpubtopic(char *topics);
        extern bool_t mqttsetsubtopic(char *topics);
        //you could also set the debug mode
        extern bool_t mqttdebugset(bool_t mode);
        mqttdebugset(false);
        //then start the mqtt
        extern bool_t mqttstart(void *handle);
        mqttstart(pMqtt);
        //start the mqtt application here
        result = mqttappstart();
    }
    return result;
}



