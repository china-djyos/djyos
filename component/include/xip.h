//----------------------------------------------------
// Copyright (c) 2018, Djyos Open source Development team. All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------
// Copyright (c) 2018，著作权由都江堰操作系统开源开发团队所有。著作权人保留一切权利。
//
// 这份授权条款，在使用者符合下列条件的情形下，授予使用者使用及再散播本
// 软件包装原始码及二进位可执行形式的权利，无论此包装是否经改作皆然：
//
// 1. 对于本软件源代码的再散播，必须保留上述的版权宣告、本条件列表，以
//    及下述的免责声明。
// 2. 对于本套件二进位可执行形式的再散播，必须连带以文件以及／或者其他附
//    于散播包装中的媒介方式，重制上述之版权宣告、本条件列表，以及下述
//    的免责声明。

// 免责声明：本软件是本软件版权持有人以及贡献者以现状（"as is"）提供，
// 本软件包装不负任何明示或默示之担保责任，包括但不限于就适售性以及特定目
// 的的适用性为默示性担保。版权持有人及本软件之贡献者，无论任何条件、
// 无论成因或任何责任主义、无论此责任为因合约关系、无过失责任主义或因非违
// 约之侵权（包括过失或其他原因等）而起，对于任何因使用本软件包装所产生的
// 任何直接性、间接性、偶发性、特殊性、惩罚性或任何结果的损害（包括但不限
// 于替代商品或劳务之购用、使用损失、资料损失、利益损失、业务中断等等），
// 不负任何责任，即在该种使用已获事前告知可能会造成此类损害的情形下亦然。
//-----------------------------------------------------------------------------
//所属模块: Iboot
//作者:  罗侍田.
//版本：V1.0.0
//文件描述: 在应用编程的核心文件
//其他说明:
//修订历史:
//1. 日期: 2016-06-17
//   作者:  罗侍田.
//   新版本号: V1.0.0
//   修改说明: 原始版本
//------------------------------------------------------
#ifndef __XIP_H__
#define __XIP_H__

#if __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>

//
// IAP文件信息
//
struct __ifile{
    u32 cxbase; // 文件实际内容的偏置（文件头部信息存放于开始，存在一个偏置）。
    u32 sz; // 文件大小
    u32 status; // 文件状态；
    struct MutexLCB *lock; // 文件锁；
};

//
// IAP文件上下文，缓存未考虑预读逻辑，即只针对写进行了缓存，读未考虑缓存；
//
struct __icontext{
    u32 pos; // 文件的当前位置；
    s16 bufed; // 存在于缓存中的数据；
    u8 *buf; // 是物理的一个缓存，逻辑上是对齐的；

    u8 *apphead;
    u32 Wappsize;
};

//
// IAP文件系统管理信息
//
struct __icore{
    void *vol; // 文件系统底层抽象，volume；
    s16 bufsz; // 文件缓冲，须大于APP的文件头。
    u32 inhead; // 文件buffer size 须大于文件头部，inhead=超出部分尺寸
    s64 MStart;             // 在媒体中的起始unit,unit为单位；
    s64 ASize;               // 所在区域的总大小；Byte为单位；
    struct Object *root; // IAP文件系统接入的文件系统的根；
    struct MutexLCB *lock; // 系统锁；
    struct __xip_drv *drv;
};
//
// iap文件系统对flash的操作函数集
//
struct __xip_drv{
    s32 (*xip_write_media) (struct __icore *core, u8 *data, u32 bytes, u32 pos);
    s32 (*xip_read_media) (struct __icore *core, u8 *data, u32 bytes, u32 pos);
    s32 (*xip_erase_media) (struct __icore *core, u32 bytes, u32 pos);
};

//从文件中加载可执行文件到内存运行，必须先启动iboot，iboot中加载文件系统
#define CN_RUN_FORM_FILE  0
//原名 EN_DIRECT_RUN，此模式下，可实现绕过iboot，直接启动APP，速度非常快
#define CN_DIRECT_RUN     1

#define CN_XIP_APP_MOUNT        "xip-app"
#define CN_XIP_APP_PATH         "/xip-app"
#define CN_XIP_IBOOT_MOUNT      "xip-iboot"
#define CN_XIP_IBOOT_PATH       "/xip-iboot"

enum _ENUM_USE_CRC_
{
    EN_NO_APP_CRC=0,
    EN_USE_APP_CRC,
};

u32 IAP_GetAPPCRC(void);
u32 IAP_GetAPPStartCodeRamAddr(void);
u32 IAP_GetAPPCodeRamSize(void);
bool_t IAP_LoadAPPFromFile(void);
s32 IAP_Update(u8 bArgC, ...);
s32 IAP_SetMethod(u32 dwMethod);
u32 IAP_GetMethod(void);
char *IAP_GetPath(void);
s32 IAP_SetPath(char *pPath);


#if __cplusplus
}
#endif
#endif  /*__IAP_H__*/
